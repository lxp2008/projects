import math

def reward_function(params):
    # 赛道和车辆参数
    track_width = params['track_width']
    distance_from_center = params['distance_from_center']
    speed = params['speed']
    steering_angle = abs(params['steering_angle'])
    all_wheels_on_track = params['all_wheels_on_track']
    progress = params['progress']
    steps = params['steps']
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']

    # 初始化奖励值
    reward = 1e-3 if not all_wheels_on_track else 1.0  # 如果脱轨，惩罚

    # 动态弯道曲率计算
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
    track_direction = math.degrees(track_direction)
    direction_diff = abs(track_direction - heading)

    # 计算弯道曲率
    curve_radius = abs(track_width / direction_diff) if direction_diff != 0 else float('inf')

    # 1. 动态速度奖励
    if curve_radius > 20:  # 直道条件
        if speed >= 4.0:
            reward += 5.0  # 高速直道奖励
        elif speed >= 3.5:
            reward += 3.0
        else:
            reward *= 0.5  # 低速直道惩罚
    elif curve_radius > 10:  # 中等弯道
        if 2.5 <= speed <= 3.5:
            reward += 3.0  # 弯道适中速度奖励
        else:
            reward *= 0.6
    else:  # 急弯条件
        if speed <= 2.5:
            reward += 3.5  # 急弯低速奖励
        else:
            reward *= 0.5  # 急弯超速惩罚

    # 2. 距离赛道中心奖励
    marker_1 = 0.1 * track_width
    marker_2 = 0.25 * track_width
    if distance_from_center <= marker_1:
        reward += 2.0  # 非常接近中心
    elif distance_from_center <= marker_2:
        reward += 1.0
    else:
        reward *= 0.2  # 偏离中心惩罚

    # 3. 智能方向修正
    if direction_diff < 5:
        reward += 3.0  # 几乎无偏差
    elif direction_diff < 10:
        reward += 1.5  # 可接受范围
    else:
        reward *= 0.3  # 偏差过大惩罚

    # 4. 减少急转角
    if steering_angle > 30:
        reward *= 0.5  # 惩罚急转弯

    # 5. 高效步数奖励
    expected_progress = (steps / 8) * 100  # 假设目标步数在每 8 步完成 100% 的赛道进度
    if progress >= expected_progress:
        reward += 15.0  # 高效完成赛道的奖励

    return float(reward)
